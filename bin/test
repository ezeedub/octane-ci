#!/usr/bin/env bash
# Run tests for project.
# This is for functional/behavior tests that run after the site is installed.
# This is run within the Build/CLI container, so has all the tools.
#: exec_target = cli

# Init the tools like npm within the cli container
if [ -e ~/.profile ]; then
  source ~/.profile
fi

# Check to see if Drupal is already installed.
DRUPAL_BOOTSTRAP=`drush status --fields=bootstrap 2> /dev/null`
if [ -z "$DRUPAL_BOOTSTRAP" ]; then
  # No Drupal db, so use sqlite for test.
  SIMPLETEST_DB="sqlite://localhost//tmp/db.sqlite"
elif [[ ! -z "$MYSQL_USER" && -z "$SIMPLETEST_DB" ]]; then
  SIMPLETEST_DB="mysql://${MYSQL_USER:-user}:${MYSQL_PASSWORD:-user}@${MYSQL_HOST:-db}/${MYSQL_DATABASE:-default}"
fi

# Set default testing URL for web host.
if [[ ! -z "$VIRTUAL_HOST" && -z "$SIMPLETEST_BASE_URL" ]]; then
  SIMPLETEST_BASE_URL=http://${VIRTUAL_HOST}
elif [[ -z "$SIMPLETEST_BASE_URL" ]]; then
  SIMPLETEST_BASE_URL=http://localhost
fi
# Set default ExistingSite test URL for web host.
if [[ -z "$DTT_BASE_URL" ]]; then
  DTT_BASE_URL=${SIMPLETEST_BASE_URL}
fi

if [[ ! -z "$1" && -z "$2" ]]; then
  # Single argument is testsuite.
  printf "$INFO_SLUG Running $1 tests...\n"
  composer test -- --testsuite $1
elif [ ! -z "$2" ]; then
  # Multiple arguments, pass to phpunit.
  printf "$INFO_SLUG Running tests...\n"
  composer test -- $@
else
  # Run all non-unit tests.
  # Unit tests are run in a separate job before the build is deployed.
  printf "$INFO_SLUG Running Kernel tests...\n"
  composer test -- --testsuite kernel
  printf "$INFO_SLUG Running Functional tests...\n"
  composer test -- --testsuite functional
  printf "$INFO_SLUG Running Functional-Javascript tests...\n"
  composer test -- --testsuite functional-javascript
  printf "$INFO_SLUG Running ExistingSite tests...\n"
  composer test -- --testsuite existing-site
fi

